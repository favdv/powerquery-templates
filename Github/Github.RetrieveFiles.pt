let 
doc = [
    Documentation.Name =  "Retrieve functions from Gitub", 
    Documentation.FunctionName = "Github.RetrieveFiles",
    Documentation.Description = "This function retrieves the files from a specified github repo and either shows the data or converts them to functions. Ensure you modify the repo, branch, etc. ", 
    Documentation.Examples = {
          [
            Description = "Retieve github data",
            Code = "FunctionName()",
            Result = "Retrieved github data. Note that options, etc are all set in the top of the function. (repoowner, repository, mainBranch, extensions, functionNameField and createFunctions)"
          ]
        }
    
  ],
  fn = ()=>
    let 
    
    repoOwner ="<repoOwner>", //e.g. "favdv"
    repository = "<repository name>", // e.g. "ready-to-use-powerqueries"
    mainBranch = "main",
    extensions = {".pq"},  
    
    functionNameField = "Documentation.FunctionName",
    createFunctions = true, //set to false for troubleshooting


  GetRepoInfo =  
    Table.SelectRows(
    Table.ExpandRecordColumn(
      Table.FromList(
      Json.Document(
        Web.Contents("https://api.github.com/repos/" & repoOwner & "/" & repository,[RelativePath = "git/trees/" & mainBranch,Query=[recursive="1"]]))[tree], 
      Splitter.SplitByNothing(), null, null, ExtraValues.Error
      ), 
      "Column1", {"path", "url", "sha"}
    ), 
    each List.AnyTrue(List.Transform(extensions, (ext) => Text.EndsWith([path], ext)))
    ),


      GetRepoContent = 
        Table.AddColumn(
          Table.AddColumn(
            GetRepoInfo, "Content", each let sha = [sha] in
            Text.FromBinary(Binary.FromText(
              Json.Document(
                Web.Contents("https://api.github.com/repos/" & repoOwner & "/" & repository,[RelativePath ="git/blobs/"& sha ])
              )[content], 
              BinaryEncoding.Base64))
            ),
            "FunctionName", 
            each 
             if Text.Contains([Content], functionNameField&" =") = false and   
                 Text.Contains([Content], functionNameField&"=") = false 
             then Text.Replace([path], "/",".") 
             else Text.BetweenDelimiters(
                       Text.BetweenDelimiters([Content], functionNameField, ","),
                     """", """"
          )
        ),

        
        AddFunctionRecord =let 
            functionList = [
            Binary.ToText=Binary.ToText,
            Binary.FromText=Binary.FromText,
            BinaryEncoding.Base64=BinaryEncoding.Base64,
            Binary.Range=Binary.Range,
            DateTimeZone.ToLocal=DateTimeZone.ToLocal, 
            DateTimeZone.FromText=DateTimeZone.FromText, 
            DateTime.FromText=DateTime.FromText,
            ExtraValues.Error=ExtraValues.Error,
            ExtraValues.Ignore=ExtraValues.Ignore,
            ExtraValues.List=ExtraValues.List,
            ExtraValues.Type=ExtraValues.Type,
            Int64.From=Int64.From,
            Int64.Type=Int64.Type,
            Json.Document=Json.Document,
            Json.FromValue = Json.FromValue,
            List.Accumulate=List.Accumulate,
            List.AllTrue=List.AllTrue,
            List.Alternate=List.Alternate,
            List.AnyTrue=List.AnyTrue,
            List.Average=List.Average,
            List.Buffer=List.Buffer,
            List.Combine=List.Combine,
            List.ConformToPageReader=List.ConformToPageReader,
            List.Contains=List.Contains,
            List.ContainsAll=List.ContainsAll,
            List.ContainsAny=List.ContainsAny,
            List.Count=List.Count,
            List.Covariance=List.Covariance,
            List.DateTimeZones=List.DateTimeZones,
            List.DateTimes=List.DateTimes,
            List.Dates=List.Dates,
            List.Difference=List.Difference,
            List.Distinct=List.Distinct,
            List.Durations=List.Durations,
            List.FindText=List.FindText,
            List.First=List.First,
            List.FirstN=List.FirstN,
            List.Generate=List.Generate,
            List.InsertRange=List.InsertRange,
            List.Intersect=List.Intersect,
            List.IsDistinct=List.IsDistinct,
            List.IsEmpty=List.IsEmpty,
            List.Last=List.Last,
            List.LastN=List.LastN,
            List.MatchesAll=List.MatchesAll,
            List.MatchesAny=List.MatchesAny,
            List.Max=List.Max,
            List.MaxN=List.MaxN,
            List.Median=List.Median,
            List.Min=List.Min,
            List.MinN=List.MinN,
            List.Mode=List.Mode,
            List.Modes=List.Modes,
            List.NonNullCount=List.NonNullCount,
            List.Numbers=List.Numbers,
            List.Percentile=List.Percentile,
            List.PositionOf=List.PositionOf,
            List.PositionOfAny=List.PositionOfAny,
            List.Positions=List.Positions,
            List.Product=List.Product,
            List.Random=List.Random,
            List.Range=List.Range,
            List.RemoveFirstN=List.RemoveFirstN,
            List.RemoveItems=List.RemoveItems,
            List.RemoveLastN=List.RemoveLastN,
            List.RemoveMatchingItems=List.RemoveMatchingItems,
            List.RemoveNulls=List.RemoveNulls,
            List.RemoveRange=List.RemoveRange,
            List.Repeat=List.Repeat,
            List.ReplaceMatchingItems=List.ReplaceMatchingItems,
            List.ReplaceRange=List.ReplaceRange,
            List.ReplaceValue=List.ReplaceValue,
            List.Reverse=List.Reverse,
            List.Select=List.Select,
            List.Single=List.Single,
            List.SingleOrDefault=List.SingleOrDefault,
            List.Skip=List.Skip,
            List.Sort=List.Sort,
            List.Split=List.Split,
            List.StandardDeviation=List.StandardDeviation,
            List.Sum=List.Sum,
            List.Times=List.Times,
            List.Transform=List.Transform,
            List.TransformMany=List.TransformMany,
            List.Type=List.Type,
            List.Union=List.Union,
            List.Zip=List.Zip,
            Number.Abs=Number.Abs,
            Number.Acos=Number.Acos,
            Number.Asin=Number.Asin,
            Number.Atan=Number.Atan,
            Number.Atan2=Number.Atan2,
            Number.BitwiseAnd=Number.BitwiseAnd,
            Number.BitwiseNot=Number.BitwiseNot,
            Number.BitwiseOr=Number.BitwiseOr,
            Number.BitwiseShiftLeft=Number.BitwiseShiftLeft,
            Number.BitwiseShiftRight=Number.BitwiseShiftRight,
            Number.BitwiseXor=Number.BitwiseXor,
            Number.Combinations=Number.Combinations,
            Number.Cos=Number.Cos,
            Number.Cosh=Number.Cosh,
            Number.E=Number.E,
            Number.Epsilon=Number.Epsilon,
            Number.Exp=Number.Exp,
            Number.Factorial=Number.Factorial,
            Number.From=Number.From,
            Number.FromText=Number.FromText,
            Number.IntegerDivide=Number.IntegerDivide,
            Number.IsEven=Number.IsEven,
            Number.IsNaN=Number.IsNaN,
            Number.IsOdd=Number.IsOdd,
            Number.Ln=Number.Ln,
            Number.Log=Number.Log,
            Number.Log10=Number.Log10,
            Number.Mod=Number.Mod,
            Number.NaN=Number.NaN,
            Number.NegativeInfinity=Number.NegativeInfinity,
            Number.PI=Number.PI,
            Number.Permutations=Number.Permutations,
            Number.PositiveInfinity=Number.PositiveInfinity,
            Number.Power=Number.Power,
            Number.Random=Number.Random,
            Number.RandomBetween=Number.RandomBetween,
            Number.Round=Number.Round,
            Number.RoundAwayFromZero=Number.RoundAwayFromZero,
            Number.RoundDown=Number.RoundDown,
            Number.RoundTowardZero=Number.RoundTowardZero,
            Number.RoundUp=Number.RoundUp,
            Number.Sign=Number.Sign,
            Number.Sin=Number.Sin,
            Number.Sinh=Number.Sinh,
            Number.Sqrt=Number.Sqrt,
            Number.Tan=Number.Tan,
            Number.Tanh=Number.Tanh,
            Number.ToText=Number.ToText,
            Number.Type=Number.Type,
            Record.AddField=Record.AddField,
            Record.Combine=Record.Combine,
            Record.Field=Record.Field,
            Record.FieldCount=Record.FieldCount,
            Record.FieldNames=Record.FieldNames,
            Record.FieldOrDefault=Record.FieldOrDefault,
            Record.FieldValues=Record.FieldValues,
            Record.FromList=Record.FromList,
            Record.FromTable=Record.FromTable,
            Record.HasFields=Record.HasFields,
            Record.RemoveFields=Record.RemoveFields,
            Record.RenameFields=Record.RenameFields,
            Record.ReorderFields=Record.ReorderFields,
            Record.SelectFields=Record.SelectFields,
            Record.ToList=Record.ToList,
            Record.ToTable=Record.ToTable,
            Record.TransformFields=Record.TransformFields,
            Record.Type=Record.Type,
            RelativePosition.FromEnd=RelativePosition.FromEnd,
            RelativePosition.FromStart=RelativePosition.FromStart,
            RelativePosition.Type=RelativePosition.Type,
            Replacer.ReplaceText=Replacer.ReplaceText,
            Replacer.ReplaceValue=Replacer.ReplaceValue,
            Splitter.SplitByNothing=Splitter.SplitByNothing,
            Splitter.SplitTextByAnyDelimiter=Splitter.SplitTextByAnyDelimiter,
            Splitter.SplitTextByCharacterTransition=Splitter.SplitTextByCharacterTransition,
            Splitter.SplitTextByDelimiter=Splitter.SplitTextByDelimiter,
            Splitter.SplitTextByEachDelimiter=Splitter.SplitTextByEachDelimiter,
            Splitter.SplitTextByLengths=Splitter.SplitTextByLengths,
            Splitter.SplitTextByPositions=Splitter.SplitTextByPositions,
            Splitter.SplitTextByRanges=Splitter.SplitTextByRanges,
            Splitter.SplitTextByRepeatedLengths=Splitter.SplitTextByRepeatedLengths,
            Splitter.SplitTextByWhitespace=Splitter.SplitTextByWhitespace,
            Table.AddColumn=Table.AddColumn,
            Table.AddFuzzyClusterColumn=Table.AddFuzzyClusterColumn,
            Table.AddIndexColumn=Table.AddIndexColumn,
            Table.AddJoinColumn=Table.AddJoinColumn,
            Table.AddKey=Table.AddKey,
            Table.AddRankColumn=Table.AddRankColumn,
            Table.AggregateTableColumn=Table.AggregateTableColumn,
            Table.AlternateRows=Table.AlternateRows,
            Table.ApproximateRowCount=Table.ApproximateRowCount,
            Table.Buffer=Table.Buffer,
            Table.Column=Table.Column,
            Table.ColumnCount=Table.ColumnCount,
            Table.ColumnNames=Table.ColumnNames,
            Table.ColumnsOfType=Table.ColumnsOfType,
            Table.Combine=Table.Combine,
            Table.CombineColumns=Table.CombineColumns,
            Table.CombineColumnsToRecord=Table.CombineColumnsToRecord,
            Table.ConformToPageReader=Table.ConformToPageReader,
            Table.Contains=Table.Contains,
            Table.ContainsAll=Table.ContainsAll,
            Table.ContainsAny=Table.ContainsAny,
            Table.DemoteHeaders=Table.DemoteHeaders,
            Table.Distinct=Table.Distinct,
            Table.DuplicateColumn=Table.DuplicateColumn,
            Table.ExpandListColumn=Table.ExpandListColumn,
            Table.ExpandRecordColumn=Table.ExpandRecordColumn,
            Table.ExpandTableColumn=Table.ExpandTableColumn,
            Table.FillDown=Table.FillDown,
            Table.FillUp=Table.FillUp,
            Table.FilterWithDataTable=Table.FilterWithDataTable,
            Table.FindText=Table.FindText,
            Table.First=Table.First,
            Table.FirstN=Table.FirstN,
            Table.FirstValue=Table.FirstValue,
            Table.FromColumns=Table.FromColumns,
            Table.FromList=Table.FromList,
            Table.FromPartitions=Table.FromPartitions,
            Table.FromRecords=Table.FromRecords,
            Table.FromRows=Table.FromRows,
            Table.FromValue=Table.FromValue,
            Table.FuzzyGroup=Table.FuzzyGroup,
            Table.FuzzyJoin=Table.FuzzyJoin,
            Table.FuzzyNestedJoin=Table.FuzzyNestedJoin,
            Table.Group=Table.Group,
            Table.HasColumns=Table.HasColumns,
            Table.InsertRows=Table.InsertRows,
            Table.IsDistinct=Table.IsDistinct,
            Table.IsEmpty=Table.IsEmpty,
            Table.Join=Table.Join,
            Table.Keys=Table.Keys,
            Table.Last=Table.Last,
            Table.LastN=Table.LastN,
            Table.MatchesAllRows=Table.MatchesAllRows,
            Table.MatchesAnyRows=Table.MatchesAnyRows,
            Table.Max=Table.Max,
            Table.MaxN=Table.MaxN,
            Table.Min=Table.Min,
            Table.MinN=Table.MinN,
            Table.NestedJoin=Table.NestedJoin,
            Table.Partition=Table.Partition,
            Table.PartitionValues=Table.PartitionValues,
            Table.Pivot=Table.Pivot,
            Table.PositionOf=Table.PositionOf,
            Table.PositionOfAny=Table.PositionOfAny,
            Table.PrefixColumns=Table.PrefixColumns,
            Table.Profile=Table.Profile,
            Table.PromoteHeaders=Table.PromoteHeaders,
            Table.Range=Table.Range,
            Table.RemoveColumns=Table.RemoveColumns,
            Table.RemoveFirstN=Table.RemoveFirstN,
            Table.RemoveLastN=Table.RemoveLastN,
            Table.RemoveMatchingRows=Table.RemoveMatchingRows,
            Table.RemoveRows=Table.RemoveRows,
            Table.RemoveRowsWithErrors=Table.RemoveRowsWithErrors,
            Table.RenameColumns=Table.RenameColumns,
            Table.ReorderColumns=Table.ReorderColumns,
            Table.Repeat=Table.Repeat,
            Table.ReplaceErrorValues=Table.ReplaceErrorValues,
            Table.ReplaceKeys=Table.ReplaceKeys,
            Table.ReplaceMatchingRows=Table.ReplaceMatchingRows,
            Table.ReplaceRelationshipIdentity=Table.ReplaceRelationshipIdentity,
            Table.ReplaceRows=Table.ReplaceRows,
            Table.ReplaceValue=Table.ReplaceValue,
            Table.ReverseRows=Table.ReverseRows,
            Table.RowCount=Table.RowCount,
            Table.Schema=Table.Schema,
            Table.SelectColumns=Table.SelectColumns,
            Table.SelectRows=Table.SelectRows,
            Table.SelectRowsWithErrors=Table.SelectRowsWithErrors,
            Table.SingleRow=Table.SingleRow,
            Table.Skip=Table.Skip,
            Table.Sort=Table.Sort,
            Table.Split=Table.Split,
            Table.SplitAt=Table.SplitAt,
            Table.SplitColumn=Table.SplitColumn,
            Table.StopFolding=Table.StopFolding,
            Table.ToColumns=Table.ToColumns,
            Table.ToList=Table.ToList,
            Table.ToRecords=Table.ToRecords,
            Table.ToRows=Table.ToRows,
            Table.TransformColumnNames=Table.TransformColumnNames,
            Table.TransformColumnTypes=Table.TransformColumnTypes,
            Table.TransformColumns=Table.TransformColumns,
            Table.TransformRows=Table.TransformRows,
            Table.Transpose=Table.Transpose,
            Table.Type=Table.Type,
            Table.Unpivot=Table.Unpivot,
            Table.UnpivotOtherColumns=Table.UnpivotOtherColumns,
            Table.View=Table.View,
            Table.ViewError=Table.ViewError,
            Table.ViewFunction=Table.ViewFunction,
            Table.WithErrorContext=Table.WithErrorContext,
            Tables.GetRelationships=Tables.GetRelationships,
            Text.AfterDelimiter=Text.AfterDelimiter,
            Text.At=Text.At,
            Text.BeforeDelimiter=Text.BeforeDelimiter,
            Text.BetweenDelimiters=Text.BetweenDelimiters,
            Text.Clean=Text.Clean,
            Text.Combine=Text.Combine,
            Text.Contains=Text.Contains,
            Text.End=Text.End,
            Text.EndsWith=Text.EndsWith,
            Text.Format=Text.Format,
            Text.From=Text.From,
            Text.FromBinary=Text.FromBinary,
            Text.InferNumberType=Text.InferNumberType,
            Text.Insert=Text.Insert,
            Text.Length=Text.Length,
            Text.Lower=Text.Lower,
            Text.Middle=Text.Middle,
            Text.NewGuid=Text.NewGuid,
            Text.PadEnd=Text.PadEnd,
            Text.PadStart=Text.PadStart,
            Text.PositionOf=Text.PositionOf,
            Text.PositionOfAny=Text.PositionOfAny,
            Text.Proper=Text.Proper,
            Text.Range=Text.Range,
            Text.Remove=Text.Remove,
            Text.RemoveRange=Text.RemoveRange,
            Text.Repeat=Text.Repeat,
            Text.Replace=Text.Replace,
            Text.ReplaceRange=Text.ReplaceRange,
            Text.Reverse=Text.Reverse,
            Text.Select=Text.Select,
            Text.Split=Text.Split,
            Text.SplitAny=Text.SplitAny,
            Text.Start=Text.Start,
            Text.StartsWith=Text.StartsWith,
            Text.ToBinary=Text.ToBinary,
            Text.ToList=Text.ToList,
            Text.Trim=Text.Trim,
            Text.TrimEnd=Text.TrimEnd,
            Text.TrimStart=Text.TrimStart,
            Text.Type=Text.Type,
            Text.Upper=Text.Upper,
            TextEncoding.Ascii=TextEncoding.Ascii,
            TextEncoding.BigEndianUnicode=TextEncoding.BigEndianUnicode,
            TextEncoding.Type=TextEncoding.Type,
            TextEncoding.Unicode=TextEncoding.Unicode,
            TextEncoding.Utf16=TextEncoding.Utf16,
            TextEncoding.Utf8=TextEncoding.Utf8,
            TextEncoding.Windows=TextEncoding.Windows,
            Value.Add=Value.Add,
            Value.Alternates=Value.Alternates,
            Value.As=Value.As,
            Value.Compare=Value.Compare,
            Value.Divide=Value.Divide,
            Value.Equals=Value.Equals,
            Value.Expression=Value.Expression,
            Value.Firewall=Value.Firewall,
            Value.FromText=Value.FromText,
            Value.Is=Value.Is,
            Value.Lineage=Value.Lineage,
            Value.Metadata=Value.Metadata,
            Value.Multiply=Value.Multiply,
            Value.NativeQuery=Value.NativeQuery,
            Value.NullableEquals=Value.NullableEquals,
            Value.Optimize=Value.Optimize,
            Value.RemoveMetadata=Value.RemoveMetadata,
            Value.ReplaceMetadata=Value.ReplaceMetadata,
            Value.ReplaceType=Value.ReplaceType,
            Value.ResourceExpression=Value.ResourceExpression,
            Value.Subtract=Value.Subtract,
            Value.Traits=Value.Traits,
            Value.Type=Value.Type,
            Value.VersionIdentity=Value.VersionIdentity,
            Value.Versions=Value.Versions,
            Value.ViewError=Value.ViewError,
            Value.ViewFunction=Value.ViewFunction

            ] 
            in 
            
               Table.AddColumn(
           Table.AddColumn(
             Table.AddColumn(GetRepoContent, "Substrings", each let
               Content = [Content],
               FoundFunctions = List.Select(Record.FieldNames(functionList), each 
                  Text.Contains(Content, _)) in FoundFunctions
             ), 
             "FunctionRecord", each Record.FromList(List.Transform([Substrings], 
             (item) => Expression.Evaluate(item,functionList)),[Substrings])
           ),
           "Functions", 
           each Record.AddField( [], [FunctionName],
             Expression.Evaluate([Content], functionList)
         )),
    
    CreateEndResult = 
      if createFunctions = true 
      then Record.Combine(AddFunctionRecord[Functions]) 
     else Table.RemoveColumns(
       AddFunctionRecord,{"url", "sha",  "FunctionRecord"})
    in CreateEndResult
  in Value.ReplaceType(fn, Value.ReplaceMetadata(Value.Type(fn), doc))
