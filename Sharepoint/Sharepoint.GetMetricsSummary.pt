let 
doc = 

  [
    Documentation.Name =  "Get summarised Sharepoint metrics", 
    Documentation.FunctionName = "Sharepoint.Metrics.Summary",
    Documentation.Description = "Retrieves the summarised analytics for every page (total viewers and views in the last 7 days and total viewers and views to date), ignoring any omittes subsites. Ensure you modify the Entra Credentials and domain to suit your specific requirements.", 
    Documentation.Examples = {
          [
            Description = "Retrieve metrics for all pages from the main site and all subsites",
            Code = "FunctionName( ""/sites/MainSite"")",
            Result = "Retrieves the summary metrics for all pages of the main site and subsites"
          ],
          [
            Description = "Retrieve metrics for all pages from the main site and omitting selected subsites",
            Code = "FunctionName( ""/sites/MainSite"",{""/sites/MainSite/SubSiteA"",""/sites/MainSite/SubSiteB""})",
            Result = "Retrieves the summary metrics for all pages of the main site and subsites bar SubSiteA and SubSiteB"
          ]
        }
    
  ],

fn = (mainsite as text, optional ignoreSites as list)=> 
let
    //Entra Credentials
    tenantId = "<yourTenantId>",
    clientId = "<yourClientId>",
    clientSecret = "<yourClientSecret>",

    //The main domain and site we want to get the subsites from
    domain = "<yourMainDomain>", //e.g. "yourdomain.sharepoint.com"
    
    ignoreSites = if ignoreSites = null then {} else ignoreSites,
    // Make the POST request to get the access token. The credentials for the Microsoft Entra app are here, but we might want to move them into e.g. a key vault or similar.
        accessToken = 
        Json.Document(
            Web.Contents(
                "https://login.microsoftonline.com/" , 
                [   Headers = [
                    #"Content-Type" = "application/x-www-form-urlencoded"],
                RelativePath = tenantId & "/oauth2/v2.0/token",
                    Content = Text.ToBinary(
                        "grant_type=client_credentials" &
                        "&client_id=" & clientId &
                        "&client_secret=" & clientSecret &
                        "&scope=https://graph.microsoft.com/.default"
                    )
                ]
            )
        )[access_token],    

    //Retrieve the unique site ID for the main site
    GetSiteId = 
            Json.Document( 
                Web.Contents( 
                    "https://graph.microsoft.com/v1.0/", 
                    [Headers=[Authorization = "Bearer " & accessToken],
                    RelativePath = "sites/"&domain&":"&Text.Lower(mainsite)] 
                ) 
            )[id], 

    //Retrieve the subsites of the main site
    GetSubSites =    
      List.ReplaceValue(       
        Table.ExpandRecordColumn(
            Table.FromList(
                Json.Document( 
                    Web.Contents( 
                        "https://graph.microsoft.com/v1.0/sites/", 
                        [Headers=[Authorization = "Bearer " & accessToken],
                        RelativePath = GetSiteId&"/sites"] 
                    ) 
                )[value],
                Splitter.SplitByNothing(), null, null, ExtraValues.Error
            ), 
            "Column1", {"id", "name", "webUrl", "displayName"}
        )[webUrl],"https://"&domain,"",Replacer.ReplaceText), 

    //Create a list of all sites and subsites, and remove the subsites we want to ignore
    siteinfo =List.RemoveItems( List.Combine({{mainsite},GetSubSites}),ignoreSites),    

    //A function to loop through all subsites to get the analytics
    GetData =  (sitePath as text) => let 
        
        //Get the site id for the (sub)site called in the loop - sitePath is the nest item in the list containing the name of the subsite
        GetSiteId = 
            Json.Document( 
                Web.Contents( 
                    "https://graph.microsoft.com/v1.0/sites/"&domain, 
                    [Headers=[Authorization = "Bearer " & accessToken], 
                    RelativePath =":"&Text.Lower(sitePath)] 
                ) 
            )[id], 
        
        //Getting the unique id if the Site Pages list for the specific (sub)site. Site Pages contains the page info for the specific site
        GetSitePagesId = 
            Json.Document( 
                Web.Contents( 
                    "https://graph.microsoft.com/v1.0/sites/", 
                            [Headers=[Authorization = "Bearer " & accessToken],
                            RelativePath = GetSiteId&"/lists?$filter=displayName eq 'Site Pages'"] 
                ) 
            )[value]{0}[id], 
        
        //Getting all pages of the subsite that are available in the sharepoint list "Site Pages" for that (sub)site
        GetPages = 
            Table.ExpandRecordColumn(
                Table.ExpandRecordColumn(
                    Table.ExpandRecordColumn(
                        Table.ExpandRecordColumn(
                            Table.ExpandRecordColumn(
                                Table.ExpandRecordColumn( 
                                    Table.FromList( 
                                        Json.Document( 
                                            Web.Contents( 
                                                "https://graph.microsoft.com/v1.0/sites/", 
                                                [Headers=[Authorization = "Bearer " & accessToken],
                                                RelativePath = GetSiteId&"/pages/microsoft.graph.sitePage"] 
                                            ) 
                                        )[value], 
                                        Splitter.SplitByNothing(), null, null, ExtraValues.Error 
                                    ), 
                                    "Column1", {"id", "name","description", "webUrl", "title","createdBy","lastModifiedBy","lastModifiedDateTime","createdDateTime","publishingState"} 
                                ), 
                                "createdBy", {"user"}, {"createdBy.user"}
                            ), "createdBy.user", {"displayName", "email"}, {"createdBy.user.displayName", "createdBy.user.email"}
                        ), "lastModifiedBy", {"user"}, {"lastModifiedBy.user"}
                    ), "lastModifiedBy.user", {"displayName", "email"}, {"lastModifiedBy.user.displayName", "lastModifiedBy.user.email"}
                ), "publishingState", {"level", "versionId"}, {"State", "Version"}), 

        //For each page, get the number of views and viewers for the last 7 days    
        GetSevenDayAnalytics = 
            Table.ExpandRecordColumn( 
                Table.ExpandRecordColumn( 
                    Table.AddColumn( 
                        GetPages,"analytics", 
                        each Json.Document( 
                            Web.Contents( 
                                "https://graph.microsoft.com/v1.0/sites/", 
                                [
                                    Headers=[Authorization = "Bearer " & accessToken], 
                                    RelativePath = GetSiteId&"/lists/"&GetSitePagesId&"/items/"&[id]&"/analytics/lastSevenDays",
                                    Query=[expand="activities"]
                                ] 
                            ) 
                        ) 
                    ), 
                    "analytics", {"access"} 
                ), 
                "access", {"actionCount", "actorCount"}, {"Views (last 7 days)", "Viewers (last 7 days)"} 
            ),

        //For each page, get the number of views and viewers for the lifetime of that page    
        GetAllAnalytics = 
            Table.ExpandRecordColumn( 
                Table.ExpandRecordColumn( 
                    Table.AddColumn( 
                        GetSevenDayAnalytics,"analytics", 
                        each Json.Document( 
                            Web.Contents( 
                                "https://graph.microsoft.com/v1.0/sites/", 
                                [
                                    Headers=[Authorization = "Bearer " & accessToken], 
                                    RelativePath = GetSiteId&"/lists/"&GetSitePagesId&"/items/"&[id]&"/analytics/alltime",
                                    Query=[expand="activities"]
                                ] 
                            ) 
                        ) 
                    ), 
                    "analytics", {"access"} 
                ), 
                "access", {"actionCount", "actorCount"}, {"Views (all)", "Viewers (all)"} 
            ),

            //Add the subsite name as a column, so we can filter on that
            AddLocation = Table.AddColumn(GetAllAnalytics,"Location", each Replacer.ReplaceText(Replacer.ReplaceText(sitePath,"/sites/",""),"marketplace/",""))
        
        in AddLocation,
        
        //Call the above loop function
        AllSiteData = List.Transform(siteinfo, each GetData(_)),

        //The above loop creates a list of tables (one for each site), so we need to combine them
        CombinedData = Table.Combine(AllSiteData),

        //Convert column types to dates, numbers, etc
        Type = Table.TransformColumnTypes(CombinedData,{{"lastModifiedDateTime", type datetime}, {"createdDateTime", type datetime},{"Views (last 7 days)", Int64.Type}, {"Viewers (last 7 days)", Int64.Type}, {"Views (all)", Int64.Type}, {"Viewers (all)", Int64.Type}}),
        
        //When a page was never accessed, if shows null. To enable calculations, null is replaced with 0
        ReplaceNulls = Table.ReplaceValue(Type,null,0,Replacer.ReplaceValue,{"Views (last 7 days)", "Viewers (last 7 days)", "Views (all)", "Viewers (all)"})
    in
    ReplaceNulls


 in 
Value.ReplaceType(fn, Value.ReplaceMetadata(Value.Type(fn), doc))
